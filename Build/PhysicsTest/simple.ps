cbuffer PixelBuffer : register(b0)
{
	float   UseTexture;
};

Texture2D DiffuseTexture;
SamplerState SampleType : register(s0);

struct VOut
{

    float4 position : SV_POSITION;
	float3 normal	: NORMAL;
	float4 color 	: COLOR;
};


float4 PShader(VOut pInput) : SV_TARGET
{
	pInput.normal = normalize(pInput.normal);
	float frac = dot(pInput.normal, float3(0.707f, 0.707f, 0.0f));
	frac = max(frac, 0.3f);
	if (UseTexture != 0)
	{
		float3 color = DiffuseTexture.Sample(SampleType, pInput.color.xy).xyz * frac;
		return float4(color, 1.0f);
	}
	else
		return pInput.color * frac;
}