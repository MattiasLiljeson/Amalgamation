cbuffer Material
{
	float4 Ambient[10];
	float4 Diffuse[10];
    float4 Flags;
};
Texture2D GradientTexture;
Texture2D NormalTexture;
SamplerState SampleType
{
	Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};

struct VOut
{
    float4 position : SV_POSITION;
    float3 wpos     : POSITION;
	float3 normal	: NORMAL;
    float3 tangent      : TANGENT;
    float3 bitangent    : BITANGENT;
	float2 texCoord : TEXCOORD;
};

float4 PShader(VOut pIn) : SV_TARGET
{
    float3 n = pIn.normal;
    if (Flags.x > 0)
    {
        float3 normalT = NormalTexture.Sample(SampleType, pIn.texCoord).xyz;

        //Should only be done if the coordinates are not in the correct range
        normalT = 2.0f*normalT - 1.0f;

        float3 N = normalize(pIn.normal);
        float3 T = normalize(pIn.tangent);
        float3 B = normalize(pIn.bitangent);

        float3x3 TBN = float3x3(T, B, N);

        n = normalize(mul(normalT, TBN));
    }


    int lcount = Flags.y;
    float val = GradientTexture.Sample(SampleType, pIn.texCoord).x;
    
    int ind = min(floor(val * lcount), lcount-1);
    float4 color = Diffuse[ind];
    
    float3 lightDir = normalize(float3(-0.707f, -0.707f, 0));
    float DiffuseFactor = max(dot(-lightDir, n), 0.0f);  
    return color * DiffuseFactor;
}