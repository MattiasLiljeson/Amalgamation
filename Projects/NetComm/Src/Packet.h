// =======================================================================================
//                                      Packet
// =======================================================================================

///---------------------------------------------------------------------------------------
/// \brief	Brief description...
///        
/// # Packet
/// Detailed description...
/// Created on: 5-12-2012 
///---------------------------------------------------------------------------------------
#pragma once

#include <vector>
#include <string>
#include <stdexcept>
#include <climits>
using namespace std;

class Packet
{
public:
	Packet();
	~Packet();

	/// Gets a pointer to the raw data that is generated by the packet content.
	char* getDataPtr();

	/// Returns the size of the raw data. The size is actually 1 byte more than
	/// the total sum of whatever is streamed in to the packet.
	/// For example, you stream in 3x integers (3*4 = 12 bytes) and the
	/// getDataSize() method will return 13.
	unsigned int getDataSize() const;

	/// Sets the raw data of the packet. It is possible to stream out so much data
	/// that equals to the byte size p_size - 1, since one byte is allocated to
	/// the packet size itself.
	void setData(char* p_data, unsigned int p_size);
	bool isEmpty() const;

	Packet& operator << (char	p_data);
	Packet& operator << (short	p_data);
	Packet& operator << (int	p_data);
	Packet& operator << (float	p_data);
	Packet& operator << (double p_data);

	Packet& operator >> (char&	 p_data);
	Packet& operator >> (short&	 p_data);
	Packet& operator >> (int&	 p_data);
	Packet& operator >> (float&  p_data);
	Packet& operator >> (double& p_data);

private:
	int readPos;
	vector<char> m_data;

	void WriteData(void* p_data, unsigned int p_dataSize);
	void ReadData(void* p_data, unsigned int p_dataSize);
};